Course:	Introduction to Programming
Instructor:	Mr. Scott Brady
E-mail:	scbrady182@gmail.com
Cell #:		(216) 575-4687

Catalog Description: This course will discuss the basic data and control structures found in programming languages. Students will learn proper design and coding methods to produce projects that are correct, complete, and clear. This course is designed to prepare students for the various programming languages and concepts they can pursue.

Texts:	http://hcs-programming.com/reading

Learning Outcomes—Upon completing this course, students will be able to:
1. Explain logic and write programs that involve the major operations of the computer program, including input, processing, output, and storage.
2. Develop computer programs that exhibit structured programming techniques and clear, correct documentation.
3. Describe and apply within computer programs the major programming control structures of sequence, selection, and looping.
4. Produce computer programs using the tools available to write source code, and compile and run the finished programs.
5. Acquire skills in basic programming concepts including variables, data types, constants, operators, expressions, functions, and object oriented principles.
6. Demonstrate a working knowledge in database storage and retrieval.
7. Combine programming skills to develop backend web projects as well as Android apps.
8. Discuss and plan out a large, long-term software project.

Evaluation—Achievement of learning outcomes will be assessed using the following methods: 
Programming projects
Unit tests
Quizzes
Examinations


Classroom participation is also considered when giving a final grade.

Course Outline:
Week | Topics
1    | Course introduction and programming basics
2    | Code writing and compiling procedures, introducing variables
3    | Variables and computations
4    | Input/output statements and documentation
5    | If statements
6    | More if statements and nested-if statements
7    | Switch statements, introducing loops
8    | Loop statements and arrays
9    | Nested loop statements
10   | Functions
11   | More functions, classes, and basic OOP concepts
12   | Continuing OOP concepts
13   | Review of programming basics
14   | Database introduction
15   | Data modeling and normalization
16   | Data relationships and more modeling
17   | Review
---    Christmas Break!
18   | Tables, types, and keys
19   | Intro to SQL
20   | Querying
21   | NoSQL and Big Data
22   | HTML and CSS review
23   | JavaScript
24   | Introduction to backed web programming
25   | Full stack web programming
26   | More full stack web programming
27   | Intro to Android App programming
28   | XML Views
29   | App navigation and next steps
30   | Software Engineering concepts
31   | Team programming
32   | Project management
---    Easter Break!
33   | Programming interests
34   | Programming interests
35   | Programming interests
36   | Review

Course Requirements:
Class Web Site: A variety of class resources will be posted on my web site including assignment descriptions, examples, and additional resources. This information can be found by navigating to http://hcs-programming.com.

Class Procedures:
* If you are absent from or tardy to a class, please obtain missed information from another student in the class.
* Laptops and tablets can be used in class; if use of these devices becomes distracting, students will be asked to stop using them.
Responsibility: Students need to take ownership for their success in this class. Class lecture will provide you with the foundation, but students must read the outside reading, study the material, practice above and beyond just the assigned work, and ask questions. Take the initiative to discuss any issue or concern with your instructor as soon as possible.
   
Submitting Assignments:
* Submit assignments digitally on the class website. You can submit them as early as you want and change them up until the due date. At that point I will pull the latest version of the assignment and grade it.

Program Assignment Guidelines—The following items list some of the common guidelines that program assignments will need to follow, although additional guidelines will be given in class which should be added to this list:
* Each program should use the class program heading. After inserting the program heading, the appropriate sections within the heading should be completed neatly. Maintain the alignment from the original heading file.
* All program submissions must only include the source code for the program, compiled executables will not be graded.
* A program must compile without errors, or it will not be accepted for grading.
* Just because a program works does not mean that it “automatically” will receive a perfect score on the assignment. A working program is the expected average, whereas above-average programs not only work, but they work in the best possible way, follow specifications and instructions given in class, and evidence craftsmanship in all areas including design, layout, documentation, and so on.
* It is imperative that students follow directions. Not doing so will result in deductions from an assignment’s overall grade.
Page 3


Heritage Christian School
Course Outline
2016-2017


